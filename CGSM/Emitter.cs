// Copyright Â© 2023 Mike Brown; see LICENSE at the root of this package

using System;
using System.IO;
using System.Text;

namespace CGSM;

public class Emitter {
    // @todo does c# have the equivalent of go:embed ?
    private static string ClusterHeaderText = @"name: STRINGS.CLUSTER_NAMES.CGSM_CLUSTER.NAME
description: STRINGS.CLUSTER_NAMES.CGSM_CLUSTER.DESCRIPTION
requiredDlcId: EXPANSION1_ID
coordinatePrefix: CGSM-C
menuOrder: -16
clusterCategory: 2
difficulty: 5

startWorldIndex: 0
";

    private static string clusterYamlPath;

    public static void generateYAML(Options opts, string modPath) {
        clusterYamlPath = System.IO.Path.Combine(modPath, "worldgen", "clusters", "CGSM.yaml");

        Util.Log("Generating {0} from opts:{1}", clusterYamlPath, opts);

        StringBuilder yamlContent = new StringBuilder();

        addHeaders(ref yamlContent, opts);
        addStartPlanet(ref yamlContent, opts);
        addWarpPlanet(ref yamlContent, opts);
        addOtherPlanets(ref yamlContent, opts);
        addSpacePOIs(ref yamlContent, opts);

        Util.LogDbg("Generated yaml file content is: {0}", yamlContent.ToString());

        File.WriteAllText(clusterYamlPath, yamlContent.ToString());
    }

    private static void addHeaders(ref StringBuilder yamlContent, Options opts) {
        yamlContent.Append(string.Format("# AUTOGENERATED by CGSM v{0}\n", Util.Version()));
        yamlContent.Append(ClusterHeaderText);
        addPlacementHeader(ref yamlContent, opts);
    }

    // @todo add conflict checking
    private static void addPlacementHeader(ref StringBuilder yamlContent, Options opts) {
        yamlContent.Append(string.Format("numRings: {0}\nworldPlacements:\n",
                                         opts.starmapRadius));
    }

    private static void addStartPlanet(ref StringBuilder yamlContent, Options opts) {
        yamlContent.Append(string.Format("- world: {0}\n  locationType: StartWorld\n  buffer: 2\n  allowedRings:\n    min: 0\n    max: 0\n", Enum.planetoidToYamlString(opts.startPlanetoid)));
    }

    private static void addWarpPlanet(ref StringBuilder yamlContent, Options opts) {
        if (opts.warpPlanetoid == (WarpPlanetoids) opts.startPlanetoid) {
            Util.Log("Warning: starting planetoid and warp planetoid are the same; this is untested");
        }

        yamlContent.Append(string.Format("- world: {0}\n  locationType: InnerCluster\n  buffer: 2\n  allowedRings:\n    min: 4\n    max: 4\n", Enum.planetoidToYamlString(opts.warpPlanetoid)));
    }

    private static void addOtherPlanets(ref StringBuilder yamlContent, Options opts) {
        addOtherPlanetIfSet(ref yamlContent, opts, opts.metallicSwampyPlanetoid,
                            OtherPlanetoids.MetallicSwampy);
        addOtherPlanetIfSet(ref yamlContent, opts, opts.desolandsPlanetoid,
                            OtherPlanetoids.Desolands);
        addOtherPlanetIfSet(ref yamlContent, opts, opts.frozenForestPlanetoid,
                            OtherPlanetoids.FrozenForest);
        addOtherPlanetIfSet(ref yamlContent, opts, opts.flippedPlanetoid, OtherPlanetoids.Flipped);
        addOtherPlanetIfSet(ref yamlContent, opts, opts.radioactiveOceanPlanetoid,
                            OtherPlanetoids.RadioactiveOcean);
        addOtherPlanetIfSet(ref yamlContent, opts, opts.tundraPlanetoid, OtherPlanetoids.Tundra);
        addOtherPlanetIfSet(ref yamlContent, opts, opts.marshyPlanetoid, OtherPlanetoids.Marshy);
        addOtherPlanetIfSet(ref yamlContent, opts, opts.mooPlanetoid, OtherPlanetoids.Moo);
        addOtherPlanetIfSet(ref yamlContent, opts, opts.waterPlanetoid, OtherPlanetoids.Water);
        addOtherPlanetIfSet(ref yamlContent, opts, opts.firePlanetoid,
                            OtherPlanetoids.Superconductive);
        addOtherPlanetIfSet(ref yamlContent, opts, opts.regolithPlanetoid,
                            OtherPlanetoids.Regolith);
    }

     private static void addOtherPlanetIfSet(ref StringBuilder yamlContent, Options opts,
                                            bool optVal, OtherPlanetoids planetoid) {
         if (!optVal) {
             return;
         }

         if (planetoid == (OtherPlanetoids) opts.startPlanetoid) {
             Util.Log("Skipping other planetoid {0} since it is already the starting one",
                      planetoid);
             return;
         }
         if (planetoid == (OtherPlanetoids) opts.warpPlanetoid) {
             Util.Log("Skipping other planetoid {0} since it is already the warp one",
                      planetoid);
             return;
         }

         yamlContent.Append(string.Format("- world: {0}\n  buffer: 4\n  allowedRings:\n    min: 5\n    max: {1}\n", Enum.planetoidToYamlString(planetoid), opts.starmapRadius - 2));
     }

    private static void addSpacePOIs(ref StringBuilder yamlContent, Options opts) {
        yamlContent.Append(string.Format("\npoiPlacements:\n  - pois:\n      - TemporalTear\n    numToSpawn: 1\n    avoidClumping: false\n    allowedRings:\n      min: 11\n      max: {0}\n", opts.starmapRadius - 1));

        var numPois = getHarvestPoiCount(opts);
        if (numPois == 0) {
            return;
        }

        yamlContent.Append("  - pois:\n");
        addSpacePOIIfSet(ref yamlContent, opts, opts.carbonAsteroid,
                         HarvestablePOIs.CarbonAsteroidField);
        addSpacePOIIfSet(ref yamlContent, opts, opts.chlorineCloud, HarvestablePOIs.ChlorineCloud);
        addSpacePOIIfSet(ref yamlContent, opts, opts.forestyOreField,
                         HarvestablePOIs.ForestyOreField);
        addSpacePOIIfSet(ref yamlContent, opts, opts.frozenOreField,
                         HarvestablePOIs.FrozenOreField);
        addSpacePOIIfSet(ref yamlContent, opts, opts.gasGiantCloud, HarvestablePOIs.GasGiantCloud);
        addSpacePOIIfSet(ref yamlContent, opts, opts.gildedAsteroidField,
                         HarvestablePOIs.GildedAsteroidField);
        addSpacePOIIfSet(ref yamlContent, opts, opts.glimmeringAsteroidField,
                         HarvestablePOIs.GlimmeringAsteroidField);
        addSpacePOIIfSet(ref yamlContent, opts, opts.heliumCloud, HarvestablePOIs.HeliumCloud);
        addSpacePOIIfSet(ref yamlContent, opts, opts.iceAsteroidField,
                         HarvestablePOIs.IceAsteroidField);
        addSpacePOIIfSet(ref yamlContent, opts, opts.interstellarIceField,
                         HarvestablePOIs.InterstellarIceField);
        addSpacePOIIfSet(ref yamlContent, opts, opts.interstellarOcean,
                         HarvestablePOIs.InterstellarOcean);
        addSpacePOIIfSet(ref yamlContent, opts, opts.metallicAsteroidField,
                         HarvestablePOIs.MetallicAsteroidField);
        addSpacePOIIfSet(ref yamlContent, opts, opts.oilyAsteroidField,
                         HarvestablePOIs.OilyAsteroidField);
        addSpacePOIIfSet(ref yamlContent, opts, opts.organicMassField,
                         HarvestablePOIs.OrganicMassField);
        addSpacePOIIfSet(ref yamlContent, opts, opts.oxidizedAsteroidField,
                         HarvestablePOIs.OxidizedAsteroidField);
        addSpacePOIIfSet(ref yamlContent, opts, opts.oxygenRichAsteroidField,
                         HarvestablePOIs.OxygenRichAsteroidField);
        addSpacePOIIfSet(ref yamlContent, opts, opts.radioactiveAsteroidField,
                         HarvestablePOIs.RadioactiveAsteroidField);
        addSpacePOIIfSet(ref yamlContent, opts, opts.radioactiveGasCloud,
                         HarvestablePOIs.RadioactiveGasCloud);
        addSpacePOIIfSet(ref yamlContent, opts, opts.rockyAsteroidField,
                         HarvestablePOIs.RockyAsteroidField);
        addSpacePOIIfSet(ref yamlContent, opts, opts.saltyAsteroidField,
                         HarvestablePOIs.SaltyAsteroidField);
        addSpacePOIIfSet(ref yamlContent, opts, opts.sandyOreField,
                         HarvestablePOIs.SandyOreField);
        addSpacePOIIfSet(ref yamlContent, opts, opts.satelliteField,
                         HarvestablePOIs.SatelliteField);
        addSpacePOIIfSet(ref yamlContent, opts, opts.swampyOreField,
                         HarvestablePOIs.SwampyOreField);
        yamlContent.Append(string.Format("    numToSpawn: {0}\n", numPois));
                         
        yamlContent.Append("    avoidClumping: true\n");
        yamlContent.Append("    canSpawnDuplicates: false\n");
        yamlContent.Append(string.Format("    allowedRings:\n      min: 4\n      max: {0}\n", opts.starmapRadius - 1));

        numPois = opts.numArtifactPOIs;
        if (numPois == 0) {
            return;
        }

        yamlContent.Append("  - pois:\n");
        yamlContent.Append("      - ArtifactSpacePOI_GravitasSpaceStation1\n");
        yamlContent.Append("      - ArtifactSpacePOI_GravitasSpaceStation2\n");
        yamlContent.Append("      - ArtifactSpacePOI_GravitasSpaceStation3\n");
        yamlContent.Append("      - ArtifactSpacePOI_GravitasSpaceStation4\n");
        yamlContent.Append("      - ArtifactSpacePOI_GravitasSpaceStation5\n");
        yamlContent.Append("      - ArtifactSpacePOI_GravitasSpaceStation6\n");
        yamlContent.Append("      - ArtifactSpacePOI_GravitasSpaceStation7\n");
        yamlContent.Append("      - ArtifactSpacePOI_GravitasSpaceStation8\n");
        yamlContent.Append("      - ArtifactSpacePOI_RussellsTeapot\n");
        yamlContent.Append(string.Format("    numToSpawn: {0}\n", numPois));
        yamlContent.Append("    avoidClumping: true\n");
        yamlContent.Append("    canSpawnDuplicates: false\n");
        yamlContent.Append(string.Format("    allowedRings:\n      min: 4\n      max: {0}\n", opts.starmapRadius - 1));
        
    }

    private static void addSpacePOIIfSet(ref StringBuilder yamlContent, Options opts, bool optVal,
                                         HarvestablePOIs poi) {
        if (!optVal) {
            return;
        }

        yamlContent.Append(string.Format("      - {0}\n", Enum.poiToYamlString(poi)));
    }

    private static int getHarvestPoiCount(Options opts) {
        int count = 0;

        count += Convert.ToInt32(opts.carbonAsteroid);
        count += Convert.ToInt32(opts.chlorineCloud);
        count += Convert.ToInt32(opts.forestyOreField);
        count += Convert.ToInt32(opts.frozenOreField);
        count += Convert.ToInt32(opts.gasGiantCloud);
        count += Convert.ToInt32(opts.gildedAsteroidField);
        count += Convert.ToInt32(opts.glimmeringAsteroidField);
        count += Convert.ToInt32(opts.heliumCloud);
        count += Convert.ToInt32(opts.iceAsteroidField);
        count += Convert.ToInt32(opts.interstellarIceField);
        count += Convert.ToInt32(opts.interstellarOcean);
        count += Convert.ToInt32(opts.metallicAsteroidField);
        count += Convert.ToInt32(opts.oilyAsteroidField);
        count += Convert.ToInt32(opts.organicMassField);
        count += Convert.ToInt32(opts.oxidizedAsteroidField);
        count += Convert.ToInt32(opts.oxygenRichAsteroidField);
        count += Convert.ToInt32(opts.radioactiveAsteroidField);
        count += Convert.ToInt32(opts.radioactiveGasCloud);
        count += Convert.ToInt32(opts.rockyAsteroidField);
        count += Convert.ToInt32(opts.saltyAsteroidField);
        count += Convert.ToInt32(opts.sandyOreField);
        count += Convert.ToInt32(opts.satelliteField);
        count += Convert.ToInt32(opts.swampyOreField);

        return count;
    }
}
