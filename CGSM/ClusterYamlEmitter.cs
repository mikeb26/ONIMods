// Copyright Â© 2023 Mike Brown; see LICENSE at the root of this package

using System.IO;
using System.Text;

namespace CGSM;

public class ClusterYamlEmitter {
    private string outputFile;
    private Cluster cluster;
    private int category;

    // @todo does c# have the equivalent of go:embed ?
    private static string ClusterYamlHeaderTextFmt = @"name: STRINGS.CLUSTER_NAMES.CGSM_CLUSTER.NAME
description: STRINGS.CLUSTER_NAMES.CGSM_CLUSTER.DESCRIPTION
requiredDlcId: EXPANSION1_ID
coordinatePrefix: CGSM-C
menuOrder: -16
clusterCategory: {0}
disableStoryTraits: true
difficulty: 5

startWorldIndex: 0
";

    public ClusterYamlEmitter(Cluster clusterIn, int categoryIn, string outputFileIn) {
        this.cluster = clusterIn;
        this.outputFile = outputFileIn;
        this.category = categoryIn;
    }

    /* returns whether or not the generated yaml has changed */
    public bool emit() {
        Util.Log("Generating {0} from opts:{1}", this.outputFile, this.cluster.opts);

        StringBuilder yamlContent = new StringBuilder();

        emitHeaders(ref yamlContent);
        emitStartPlanet(ref yamlContent);
        emitWarpPlanet(ref yamlContent);
        emitOtherPlanets(ref yamlContent);
        emitSpacePOIs(ref yamlContent);

        Util.LogDbg("Generated yaml file content is: {0}", yamlContent.ToString());

        var existingyamlContent = File.ReadAllText(this.outputFile);
        if (existingyamlContent == yamlContent.ToString()) {
            Util.LogDbg("Skipping write of {0}", this.outputFile);
            return false;
        }

        File.WriteAllText(this.outputFile, yamlContent.ToString());

        return true;
    }
    private void emitHeaders(ref StringBuilder yamlContent) {
        yamlContent.Append(string.Format("# AUTOGENERATED by CGSM v{0}\n", Util.Version()));
        yamlContent.Append(string.Format(ClusterYamlHeaderTextFmt, this.category));
        yamlContent.Append(string.Format("numRings: {0}\nworldPlacements:\n", this.cluster.opts.starmapRadius));
    }

    private void emitStartPlanet(ref StringBuilder yamlContent) {
        yamlContent.Append(string.Format("- world: {0}\n  locationType: StartWorld\n  buffer: 2\n  allowedRings:\n    min: 0\n    max: 0\n", this.cluster.start.ToYamlString()));
    }

    private void emitWarpPlanet(ref StringBuilder yamlContent) {
        yamlContent.Append(string.Format("- world: {0}\n  locationType: InnerCluster\n  buffer: 2\n  allowedRings:\n    min: 4\n    max: 4\n", this.cluster.warp.ToYamlString()));
    }

    private void emitOtherPlanets(ref StringBuilder yamlContent) {
        for (int ii = 0; ii<this.cluster.others.Length; ii++) {
            yamlContent.Append(string.Format("- world: {0}\n  buffer: 4\n  allowedRings:\n    min: 5\n    max: {1}\n", this.cluster.others[ii].ToYamlString(), this.cluster.opts.starmapRadius - 2));
        }
    }

    private void emitSpacePOIs(ref StringBuilder yamlContent) {
        yamlContent.Append(string.Format("\npoiPlacements:\n  - pois:\n      - TemporalTear\n    numToSpawn: 1\n    avoidClumping: false\n    allowedRings:\n      min: 11\n      max: {0}\n", this.cluster.opts.starmapRadius - 1));

        var numPois = this.cluster.opts.getHarvestPoiCount();
        if (numPois == 0) {
            return;
        }

        yamlContent.Append("  - pois:\n");
        emitSpacePOIIfSet(ref yamlContent, this.cluster.opts.carbonAsteroid,
                         HarvestablePOIs.CarbonAsteroidField);
        emitSpacePOIIfSet(ref yamlContent, this.cluster.opts.chlorineCloud, HarvestablePOIs.ChlorineCloud);
        emitSpacePOIIfSet(ref yamlContent, this.cluster.opts.forestyOreField,
                         HarvestablePOIs.ForestyOreField);
        emitSpacePOIIfSet(ref yamlContent, this.cluster.opts.frozenOreField,
                         HarvestablePOIs.FrozenOreField);
        emitSpacePOIIfSet(ref yamlContent, this.cluster.opts.gasGiantCloud, HarvestablePOIs.GasGiantCloud);
        emitSpacePOIIfSet(ref yamlContent, this.cluster.opts.gildedAsteroidField,
                         HarvestablePOIs.GildedAsteroidField);
        emitSpacePOIIfSet(ref yamlContent, this.cluster.opts.glimmeringAsteroidField,
                         HarvestablePOIs.GlimmeringAsteroidField);
        emitSpacePOIIfSet(ref yamlContent, this.cluster.opts.heliumCloud, HarvestablePOIs.HeliumCloud);
        emitSpacePOIIfSet(ref yamlContent, this.cluster.opts.iceAsteroidField,
                         HarvestablePOIs.IceAsteroidField);
        emitSpacePOIIfSet(ref yamlContent, this.cluster.opts.interstellarIceField,
                         HarvestablePOIs.InterstellarIceField);
        emitSpacePOIIfSet(ref yamlContent, this.cluster.opts.interstellarOcean,
                         HarvestablePOIs.InterstellarOcean);
        emitSpacePOIIfSet(ref yamlContent, this.cluster.opts.metallicAsteroidField,
                         HarvestablePOIs.MetallicAsteroidField);
        emitSpacePOIIfSet(ref yamlContent, this.cluster.opts.oilyAsteroidField,
                         HarvestablePOIs.OilyAsteroidField);
        emitSpacePOIIfSet(ref yamlContent, this.cluster.opts.organicMassField,
                         HarvestablePOIs.OrganicMassField);
        emitSpacePOIIfSet(ref yamlContent, this.cluster.opts.oxidizedAsteroidField,
                         HarvestablePOIs.OxidizedAsteroidField);
        emitSpacePOIIfSet(ref yamlContent, this.cluster.opts.oxygenRichAsteroidField,
                         HarvestablePOIs.OxygenRichAsteroidField);
        emitSpacePOIIfSet(ref yamlContent, this.cluster.opts.radioactiveAsteroidField,
                         HarvestablePOIs.RadioactiveAsteroidField);
        emitSpacePOIIfSet(ref yamlContent, this.cluster.opts.radioactiveGasCloud,
                         HarvestablePOIs.RadioactiveGasCloud);
        emitSpacePOIIfSet(ref yamlContent, this.cluster.opts.rockyAsteroidField,
                         HarvestablePOIs.RockyAsteroidField);
        emitSpacePOIIfSet(ref yamlContent, this.cluster.opts.saltyAsteroidField,
                         HarvestablePOIs.SaltyAsteroidField);
        emitSpacePOIIfSet(ref yamlContent, this.cluster.opts.sandyOreField,
                         HarvestablePOIs.SandyOreField);
        emitSpacePOIIfSet(ref yamlContent, this.cluster.opts.satelliteField,
                         HarvestablePOIs.SatelliteField);
        emitSpacePOIIfSet(ref yamlContent, this.cluster.opts.swampyOreField,
                         HarvestablePOIs.SwampyOreField);
        yamlContent.Append(string.Format("    numToSpawn: {0}\n", numPois));
                         
        yamlContent.Append("    avoidClumping: true\n");
        yamlContent.Append("    canSpawnDuplicates: false\n");
        yamlContent.Append(string.Format("    allowedRings:\n      min: 4\n      max: {0}\n", this.cluster.opts.starmapRadius - 1));

        numPois = this.cluster.opts.numArtifactPOIs;
        if (numPois == 0) {
            return;
        }

        yamlContent.Append("  - pois:\n");
        yamlContent.Append("      - ArtifactSpacePOI_GravitasSpaceStation1\n");
        yamlContent.Append("      - ArtifactSpacePOI_GravitasSpaceStation2\n");
        yamlContent.Append("      - ArtifactSpacePOI_GravitasSpaceStation3\n");
        yamlContent.Append("      - ArtifactSpacePOI_GravitasSpaceStation4\n");
        yamlContent.Append("      - ArtifactSpacePOI_GravitasSpaceStation5\n");
        yamlContent.Append("      - ArtifactSpacePOI_GravitasSpaceStation6\n");
        yamlContent.Append("      - ArtifactSpacePOI_GravitasSpaceStation7\n");
        yamlContent.Append("      - ArtifactSpacePOI_GravitasSpaceStation8\n");
        yamlContent.Append("      - ArtifactSpacePOI_RussellsTeapot\n");
        yamlContent.Append(string.Format("    numToSpawn: {0}\n", numPois));
        yamlContent.Append("    avoidClumping: true\n");
        yamlContent.Append("    canSpawnDuplicates: false\n");
        yamlContent.Append(string.Format("    allowedRings:\n      min: 4\n      max: {0}\n", this.cluster.opts.starmapRadius - 1));
        
    }

    private void emitSpacePOIIfSet(ref StringBuilder yamlContent, bool optVal,
                                         HarvestablePOIs poi) {
        if (!optVal) {
            return;
        }

        yamlContent.Append(string.Format("      - {0}\n", POI.ToYamlString(poi)));
    }
}
